/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.nordakademie.evaluation.services.EvaluationGrammarAccess;

public class EvaluationParser extends AbstractContentAssistParser {
	
	@Inject
	private EvaluationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.nordakademie.evaluation.ui.contentassist.antlr.internal.InternalEvaluationParser createParser() {
		org.xtext.nordakademie.evaluation.ui.contentassist.antlr.internal.InternalEvaluationParser result = new org.xtext.nordakademie.evaluation.ui.contentassist.antlr.internal.InternalEvaluationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQuestionAccess().getAlternatives(), "rule__Question__Alternatives");
					put(grammarAccess.getSurveyAccess().getGroup(), "rule__Survey__Group__0");
					put(grammarAccess.getFreetextQuestionAccess().getGroup(), "rule__FreetextQuestion__Group__0");
					put(grammarAccess.getSelectionAccess().getGroup(), "rule__Selection__Group__0");
					put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
					put(grammarAccess.getSurveyAccess().getNameAssignment_1(), "rule__Survey__NameAssignment_1");
					put(grammarAccess.getSurveyAccess().getTitleAssignment_2(), "rule__Survey__TitleAssignment_2");
					put(grammarAccess.getSurveyAccess().getGreetingAssignment_3(), "rule__Survey__GreetingAssignment_3");
					put(grammarAccess.getSurveyAccess().getDurationAssignment_4(), "rule__Survey__DurationAssignment_4");
					put(grammarAccess.getSurveyAccess().getQuestionsAssignment_5(), "rule__Survey__QuestionsAssignment_5");
					put(grammarAccess.getFreetextQuestionAccess().getNameAssignment_1(), "rule__FreetextQuestion__NameAssignment_1");
					put(grammarAccess.getFreetextQuestionAccess().getTextAssignment_2(), "rule__FreetextQuestion__TextAssignment_2");
					put(grammarAccess.getSelectionAccess().getNameAssignment_1(), "rule__Selection__NameAssignment_1");
					put(grammarAccess.getSelectionAccess().getTextAssignment_2(), "rule__Selection__TextAssignment_2");
					put(grammarAccess.getSelectionAccess().getChoicesAssignment_4(), "rule__Selection__ChoicesAssignment_4");
					put(grammarAccess.getChoiceAccess().getNameAssignment_0(), "rule__Choice__NameAssignment_0");
					put(grammarAccess.getChoiceAccess().getTextAssignment_1(), "rule__Choice__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.nordakademie.evaluation.ui.contentassist.antlr.internal.InternalEvaluationParser typedParser = (org.xtext.nordakademie.evaluation.ui.contentassist.antlr.internal.InternalEvaluationParser) parser;
			typedParser.entryRuleSurvey();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EvaluationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EvaluationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
