/**
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.generator;

import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.nordakademie.evaluation.evaluation.Bullet;
import org.xtext.nordakademie.evaluation.evaluation.Chart;
import org.xtext.nordakademie.evaluation.evaluation.Freetext;
import org.xtext.nordakademie.evaluation.evaluation.Graduation;
import org.xtext.nordakademie.evaluation.evaluation.Page;
import org.xtext.nordakademie.evaluation.evaluation.Question;
import org.xtext.nordakademie.evaluation.evaluation.Rating;
import org.xtext.nordakademie.evaluation.evaluation.Selection;
import org.xtext.nordakademie.evaluation.evaluation.Survey;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EvaluationGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    final Survey survey = ((Survey) _head);
    EList<Page> _pages = survey.getPages();
    for (final Page page : _pages) {
      String _name = page.getName();
      String _plus = (_name + ".html");
      CharSequence _html = this.toHtml(survey, page);
      fsa.generateFile(_plus, _html);
    }
  }
  
  public CharSequence toHtml(final Survey survey, final Page page) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<title>");
    String _title = survey.getTitle();
    _builder.append(_title, "\t\t");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<link href=\"../css/evaluation.css\" rel=\"stylesheet\" media=\"screen\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div id=\"wrapper\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div id=\"header\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<h1>");
    String _title_1 = survey.getTitle();
    _builder.append(_title_1, "\t\t\t\t");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("<p>");
    String _greeting = survey.getGreeting();
    _builder.append(_greeting, "\t\t\t\t");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("</div id=header>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div id=\"main\">");
    _builder.newLine();
    {
      boolean _isForwarding = page.isForwarding();
      if (_isForwarding) {
        _builder.append("<form action=\"");
        Page _followingPage = page.getFollowingPage();
        String _name = _followingPage.getName();
        String _plus = (_name + ".html");
        _builder.append(_plus, "");
        _builder.append("\" method=\"post\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t\t\t\t\t");
        Question _question = page.getQuestion();
        CharSequence _select = this.select(_question);
        _builder.append(_select, "\t\t\t\t\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t\t\t\t\t\t\t");
        _builder.append("<button type=\"submit\" value=\"submit\">next</button>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<button type=\"reset\" value=\"reset\">reset</button>");
        _builder.newLine();
        _builder.append("</form>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ");
        _builder.newLine();
      } else {
        _builder.append("<form action=\"evaluation.html\" method=\"post\">");
        _builder.newLine();
        _builder.append("\t");
        Question _question_1 = page.getQuestion();
        CharSequence _select_1 = this.select(_question_1);
        _builder.append(_select_1, "\t");
        _builder.append("\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<button type=\"submit\" value=\"submit\">finish</button>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<button type=\"reset\" value=\"reset\">reset</button>");
        _builder.newLine();
        _builder.append("</form>\t\t\t\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("</div id\"main\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div id=\"footer\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<i>Hausarbeit Softwareengineering von Philipp Sch√§fer & Martin Kuhla</i>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div id=\"footer\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</div id=\"wrapper\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Freetext question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<b>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<label for=\"");
    String _name = question.getName();
    _builder.append(_name, "\t");
    _builder.append("\">");
    String _questionText = question.getQuestionText();
    _builder.append(_questionText, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _helptext = this.helptext(question);
    _builder.append(_helptext, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<p></p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<input type=\"text\" id=\"");
    String _name_1 = question.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\" name=\"");
    String _name_2 = question.getName();
    _builder.append(_name_2, "\t");
    _builder.append("\" required>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<label>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</b>");
    _builder.newLine();
    _builder.append("</p>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Selection question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p><b>");
    _builder.newLine();
    _builder.append("\t");
    String _questionText = question.getQuestionText();
    _builder.append(_questionText, "\t");
    _builder.append("<br>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _helptext = this.helptext(question);
    _builder.append(_helptext, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<p></p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<fieldset>\t\t\t");
    _builder.newLine();
    {
      EList<Bullet> _bullets = question.getBullets();
      for(final Bullet bullet : _bullets) {
        {
          boolean _isOneChoice = question.isOneChoice();
          if (_isOneChoice) {
            _builder.append("\t");
            _builder.append("<input type=\"radio\" id=\"");
            String _name = bullet.getName();
            _builder.append(_name, "\t");
            _builder.append("\" name=\"");
            String _name_1 = question.getName();
            _builder.append(_name_1, "\t");
            _builder.append("\" value=\"");
            String _bulletText = bullet.getBulletText();
            _builder.append(_bulletText, "\t");
            _builder.append("\" required/><label for=\"");
            String _name_2 = bullet.getName();
            _builder.append(_name_2, "\t");
            _builder.append("\">");
            String _bulletText_1 = bullet.getBulletText();
            _builder.append(_bulletText_1, "\t");
            _builder.append("</label><br>");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("<label for=\"");
            String _name_3 = bullet.getName();
            _builder.append(_name_3, "\t");
            _builder.append("\"> <input type=\"checkbox\" id=\"");
            String _name_4 = bullet.getName();
            _builder.append(_name_4, "\t");
            _builder.append("\" name=\"");
            String _name_5 = question.getName();
            _builder.append(_name_5, "\t");
            _builder.append("\" value=\"");
            String _bulletText_2 = bullet.getBulletText();
            _builder.append(_bulletText_2, "\t");
            _builder.append("\"> ");
            String _bulletText_3 = bullet.getBulletText();
            _builder.append(_bulletText_3, "\t");
            _builder.append(" </label><br> \t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isFreetext = bullet.isFreetext();
          if (_isFreetext) {
            _builder.append("\t");
            _builder.append("&nbsp;<input type=\"text\" name=\"");
            String _name_6 = question.getName();
            _builder.append(_name_6, "\t");
            _builder.append("\" id=\"");
            String _name_7 = question.getName();
            _builder.append(_name_7, "\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("<br>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</fieldset> </b>\t");
    _builder.newLine();
    _builder.append("</p>\t\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Chart question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p><b>");
    _builder.newLine();
    _builder.append("\t");
    String _questionText = question.getQuestionText();
    _builder.append(_questionText, "\t");
    _builder.append("<br>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _helptext = this.helptext(question);
    _builder.append(_helptext, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<p></<p>\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<style> table, td, th { border: 1px solid black; } </style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<tr> ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<th>&nbsp;</th>");
    _builder.newLine();
    {
      EList<Graduation> _graduations = question.getGraduations();
      for(final Graduation graduation : _graduations) {
        _builder.append("\t\t");
        _builder.append("<th>");
        String _graduationText = graduation.getGraduationText();
        _builder.append(_graduationText, "\t\t");
        _builder.append("</th>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("</tr> ");
    _builder.newLine();
    {
      EList<Bullet> _bullets = question.getBullets();
      for(final Bullet bullet : _bullets) {
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<th>");
        String _bulletText = bullet.getBulletText();
        _builder.append(_bulletText, "\t");
        _builder.append("</th>");
        _builder.newLineIfNotEmpty();
        {
          EList<Graduation> _graduations_1 = question.getGraduations();
          for(final Graduation graduation_1 : _graduations_1) {
            _builder.append(" \t");
            _builder.append("<th><input type=\"radio\" id=\"");
            String _name = bullet.getName();
            _builder.append(_name, " \t");
            _builder.append("\" name=\"");
            String _bulletText_1 = bullet.getBulletText();
            _builder.append(_bulletText_1, " \t");
            _builder.append("\" value=");
            String _graduationText_1 = graduation_1.getGraduationText();
            _builder.append(_graduationText_1, " \t");
            _builder.append(" required></th> \t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(" ");
        _builder.append("</tr>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</table> \t\t\t");
    _builder.newLine();
    _builder.append("</b></p>\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Rating question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p><b>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<label>");
    String _questionText = question.getQuestionText();
    _builder.append(_questionText, "\t");
    _builder.append("</label><br>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _helptext = this.helptext(question);
    _builder.append(_helptext, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<p></<p>\t\t\t");
    _builder.newLine();
    {
      int _ratingQuantity = question.getRatingQuantity();
      IntegerRange _upTo = new IntegerRange(1, _ratingQuantity);
      for(final Integer ratingValue : _upTo) {
        _builder.append(ratingValue, "");
        _builder.append("<input type=\"radio\" id=\"");
        String _name = question.getName();
        _builder.append(_name, "");
        _builder.append("\" name=\"");
        String _name_1 = question.getName();
        _builder.append(_name_1, "");
        _builder.append("\"  value=");
        _builder.append(ratingValue, "");
        _builder.append("\" required/>&nbsp;&nbsp;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</b></p>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence helptext(final Question question) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _helpText = question.getHelpText();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_helpText);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        String _helpText_1 = question.getHelpText();
        _builder.append(_helpText_1, "");
        _builder.append("<br>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence select(final Question question) {
    if (question instanceof Chart) {
      return _select((Chart)question);
    } else if (question instanceof Selection) {
      return _select((Selection)question);
    } else if (question instanceof Freetext) {
      return _select((Freetext)question);
    } else if (question instanceof Rating) {
      return _select((Rating)question);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(question).toString());
    }
  }
}
