/**
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.nordakademie.evaluation.evaluation.Choice;
import org.xtext.nordakademie.evaluation.evaluation.Freetext;
import org.xtext.nordakademie.evaluation.evaluation.Question;
import org.xtext.nordakademie.evaluation.evaluation.Selection;
import org.xtext.nordakademie.evaluation.evaluation.Survey;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EvaluationGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    String _simpleName = this.getSimpleName(resource);
    String _plus = (_simpleName + ".html");
    EList<EObject> _contents = resource.getContents();
    Iterable<Survey> _filter = Iterables.<Survey>filter(_contents, Survey.class);
    Survey _head = IterableExtensions.<Survey>head(_filter);
    CharSequence _html = this.toHtml(_head);
    fsa.generateFile(_plus, _html);
  }
  
  public CharSequence toHtml(final Survey survey) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<title>");
    String _title = survey.getTitle();
    _builder.append(_title, "\t\t");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1>");
    String _title_1 = survey.getTitle();
    _builder.append(_title_1, "\t\t");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<p>");
    String _greeting = survey.getGreeting();
    _builder.append(_greeting, "\t\t");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      EList<Question> _questions = survey.getQuestions();
      for(final Question question : _questions) {
        _builder.append("\t\t\t\t\t\t");
        CharSequence _select = this.select(question);
        _builder.append(_select, "\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>\t");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Freetext question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<label>");
    String _question = question.getQuestion();
    _builder.append(_question, "\t\t");
    _builder.append("</label><br>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<input type=\"text\" name=\"");
    String _name = question.getName();
    _builder.append(_name, "\t\t");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("</p>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _select(final Selection question) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<label>");
    String _question = question.getQuestion();
    _builder.append(_question, "\t");
    _builder.append("</label><br>");
    _builder.newLineIfNotEmpty();
    {
      EList<Choice> _choices = question.getChoices();
      for(final Choice choice : _choices) {
        _builder.append("\t");
        _builder.append("<input type=\"checkbox\" name=\"");
        String _name = question.getName();
        _builder.append(_name, "\t");
        _builder.append("\" value=\"");
        String _name_1 = choice.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\"/>");
        String _bulletPoint = choice.getBulletPoint();
        _builder.append(_bulletPoint, "\t");
        _builder.newLineIfNotEmpty();
        {
          boolean _isFreetext = choice.isFreetext();
          if (_isFreetext) {
            _builder.append("\t");
            _builder.append("&nbsp;<input type=\"text\" name=\"");
            String _name_2 = choice.getName();
            _builder.append(_name_2, "\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("<br>");
        _builder.newLine();
      }
    }
    _builder.append("</p>\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public String getSimpleName(final Resource resource) {
    URI _uRI = resource.getURI();
    URI _trimFileExtension = _uRI.trimFileExtension();
    return _trimFileExtension.lastSegment();
  }
  
  public CharSequence select(final Question question) {
    if (question instanceof Freetext) {
      return _select((Freetext)question);
    } else if (question instanceof Selection) {
      return _select((Selection)question);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(question).toString());
    }
  }
}
