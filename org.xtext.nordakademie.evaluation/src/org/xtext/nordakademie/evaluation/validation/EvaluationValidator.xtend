/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.validation

import org.eclipse.xtext.validation.Check

import static org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage.Literals.*

import org.xtext.nordakademie.evaluation.evaluation.Question
import org.xtext.nordakademie.evaluation.evaluation.Chart
import org.xtext.nordakademie.evaluation.evaluation.Bullet
import org.xtext.nordakademie.evaluation.evaluation.Choice
import org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage
import org.xtext.nordakademie.evaluation.evaluation.Survey
import org.xtext.nordakademie.evaluation.evaluation.Page
import org.xtext.nordakademie.evaluation.evaluation.Rating

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EvaluationValidator extends AbstractEvaluationValidator {

// Variablen für die Übergabe an den QuickFix Provider
public static val INVALID_ENTITY_NAME =
"org.text.nordakademie.evaluation.InvalidSurveyName";


// Fehlermeldungen

// Wirft eine Fehlermeldung, wenn die Umfrage keine Seite enthält.
	@Check
	def checkSurveyContainsAPage(Survey survey) {
		if (survey.pages.empty)
			error('Missing page: A survey must have at least one page', SURVEY__NAME)
	}	
	
// Wirft eine Fehlermeldung, wenn die Seite keine Frage enthält.
	@Check
	def checkPageContainsAQuestion(Page page) {
		if (page.eContents.empty) 
			error('Missing question: A page must have one question', PAGE__NAME)
	}	

// Wirft eine Fehlermeldung, wenn eine Frage leer ist
	@Check
	def noEmptyQuestions(Question question) {
		if(question.questionText.empty){
			error("Empty question: Please insert a question", QUESTION__QUESTION_TEXT)
		}
	}

// Wirft eine Fehlermeldung, wenn ein Aufzählungspunkt keinen Text hat
	@Check
	def noEmptyBulletPoints(Bullet bullet) {
		if(bullet.bulletText.empty) {
			error("Empty bullet point: Please insert a text for the bullet point", BULLET__BULLET_TEXT)
		}
	}
	
	
// Wirft eine Fehlermeldung, wenn 2 Aufzählungspunkte den gleichen Text haben
	@Check 
	def noDoubleBulletPoints(Choice choice) {
		var mapWithBullets = newHashMap
		for(bullet: choice.bullets) {
			//returns the previous value associated with key, or null if there was no mapping for key
			val previousBullet = mapWithBullets.put(bullet.bulletText, bullet)
			if(previousBullet != null) {
				error("Double bullet point: Please insert another bullet point text", bullet, BULLET__BULLET_TEXT)
				error("Double bullet point", previousBullet, BULLET__BULLET_TEXT)
			}
		}
	}
	
// Wirft eine Fehlermeldung, wenn zwei Bewertungen den gleichen Text haben
	@Check 
	def noDoubleChartGraduation(Chart chart) {
		var mapWithGraduations = newHashMap
		for(graduation: chart.graduations) {
			val previousGraduations = mapWithGraduations.put(graduation.graduationText, graduation)
			if(previousGraduations != null) {
				error("Double graduation: Please insert another graduation text", graduation, GRADUATION__GRADUATION_TEXT)
				error("Double graduation", previousGraduations, GRADUATION__GRADUATION_TEXT)
			}
		}
	}
	
// Wirft eine Fehlermeldung, wenn zwei Seiten den gleichen Namen haben	
	@Check 
	def noDoublePage(Survey survey) {
		var mapWithPages = newHashMap
		for(page: survey.pages) {
			val previousPages = mapWithPages.put(page.name, page)
			if(previousPages != null) {
				error("Double page: Please insert another page name", page, PAGE__NAME)
				error("Double page", previousPages, PAGE__NAME)
			}
		}
	}
	
// Wirft eine Fehlermeldung, wenn die Folgeseite nicht existiert
	@Check
	def checkForwardingPage(Page page) {
		if (!page.followingPage.eAllContents.exists[]){
			error("Non existing Page: Please insert a correct following Page", PAGE__FOLLOWING_PAGE)
		}
	}


// Warnungen
	
// Gibt eine Warnung aus wenn der Umfragenname klein geschrieben ist
	@Check
	def checkUpperCaseSurvey(Survey survey) {
  		if (!Character.isUpperCase(survey.name.charAt(0))) {
    		warning("First capital: The survey name should start with an upper capital", 
      		EvaluationPackage.Literals.SURVEY__NAME, INVALID_ENTITY_NAME, survey.name);
  		}
	}
	
// Gibt eine Warnung aus wenn der Seitenname klein geschrieben ist
	@Check
	def checkUpperCasePage(Page page) {
  		if (!Character.isUpperCase(page.name.charAt(0))) {
    		warning("First capital: The page name should start with an upper capital", 
      		EvaluationPackage.Literals.PAGE__NAME, INVALID_ENTITY_NAME, page.name);
  		}
	}
	
// Gibt eine Warnung aus wenn der Fragenname klein geschrieben ist
	@Check
	def checkUpperCaseQuestion(Question question) {
  		if (!Character.isUpperCase(question.name.charAt(0))) {
    		warning("First capital: The question name should start with an upper capital", 
      		EvaluationPackage.Literals.QUESTION__NAME, INVALID_ENTITY_NAME, question.name);
  		}
	}

// Gibt eine Warnung aus wenn die Anzahl der Bewertungsstufen größer 10 ist
	@Check
	def checkRatingQuantity(Rating rating) {
  		if (rating.ratingQuantity > 10)
  			warning("Rating quantity greater than 10: This may cause some display problems with screen width ",RATING__RATING_QUANTITY)
  	}

}

