/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.validation

import org.eclipse.xtext.validation.Check

import static org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage.Literals.*

import org.xtext.nordakademie.evaluation.evaluation.Question
import org.xtext.nordakademie.evaluation.evaluation.Chart
import org.xtext.nordakademie.evaluation.evaluation.Bullet
import org.xtext.nordakademie.evaluation.evaluation.Choice
import org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage
import org.xtext.nordakademie.evaluation.evaluation.Survey

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EvaluationValidator extends AbstractEvaluationValidator {

// Es d端rfen keine leeren Fragen vorhanden sein
	@Check
	def noEmptyQuestions(Question question) {
		if(question.questionText.isEmpty){
			error("Empty question: Please insert a question", QUESTION__QUESTION_TEXT)
		}
	}

// Es d端rfen keine leeren Bullet Points vorhanden sein	
	@Check
	def noEmptyBulletPoints(Bullet bullet) {
		if(bullet.bulletText.isEmpty) {
			error("Empty bullet point: Please insert a text for the bullet point", BULLET__BULLET_TEXT)
		}
	}
	

// Es d端rfen keine doppelten Bullet Points vorhanden sein 
	@Check 
	def noDoubleBulletPoints(Choice choice) {
		var nameToBullet = newHashMap
		for(bullet: choice.bullets) {
			val choiceWithSameName = nameToBullet.put(bullet.bulletText, bullet)
			if(choiceWithSameName != null) {
				error("Double Bullet Point", bullet, BULLET__BULLET_TEXT)
				error("Double Bullet Point: Please insert another bullet point", choiceWithSameName, BULLET__BULLET_TEXT)
			}
		}
	}
	
// Es d端rfen keine doppelten Bewertungen in Charts vorhanden sein
	@Check 
	def noDoubleChartGraduation(Chart question) {
		var nameToGraduation = newHashMap
		for(graduation: question.graduations) {
			val graduationWithSameName = nameToGraduation.put(graduation.graduationText, graduation)
			if(graduationWithSameName != null) {
				error("Double Graduation", graduation, GRADUATION__GRADUATION_TEXT)
				error("Double Graduation: Please insert another graduation", graduationWithSameName, GRADUATION__GRADUATION_TEXT)
			}
		}
	}
	
// Gibt eine Warnung aus wenn der Survey Name klein geschrieben ist
	@Check
	def void checkUpperCaseSurvey(Survey survey) {
  		if (!Character::isUpperCase(survey.getName().charAt(0))) {
    		warning("The survey name should start with an upper capital", 
      		EvaluationPackage$Literals::SURVEY__NAME);
  			}
	}
	
}

