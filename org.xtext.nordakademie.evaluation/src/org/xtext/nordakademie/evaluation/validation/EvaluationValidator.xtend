/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.validation

import org.eclipse.xtext.validation.Check

import static org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage.Literals.*

import org.xtext.nordakademie.evaluation.evaluation.Question
import org.xtext.nordakademie.evaluation.evaluation.Selection
import org.xtext.nordakademie.evaluation.evaluation.Chart
import org.xtext.nordakademie.evaluation.evaluation.Bullet
import org.xtext.nordakademie.evaluation.evaluation.Choice
/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EvaluationValidator extends AbstractEvaluationValidator {

// Es darf keine leeren Fragen geben
	@Check
	def noEmptyQuestions(Question question) {
		if(question.questionText.isEmpty){
			error("Please insert a question", QUESTION__QUESTION_TEXT)
		}
	}

// Es darf keine leeren Bullet Points geben	
	@Check
	def noEmptyBulletPoints(Bullet bullet) {
		if(bullet.bulletText.isEmpty) {
			error("Please insert a bullet point", BULLET__BULLET_TEXT)
		}
	}
	
// Es dürfen keine doppelten Bullet Points vorhanden sein (derzeit nur bei Selection)
//	@Check 
//	def duplicateChoiceBulletPoint(Selection question) {
//		var nameToChoice = newHashMap
//		for(choice: question.choices) {
//			val choiceWithSameName = nameToChoice.put(choice.bulletPoint, choice)
//			if(choiceWithSameName != null) {
//				error("Double Bullet Point", choice, CHOICE__BULLET_POINT)
//				error("Double Bullet Point", choiceWithSameName, CHOICE__BULLET_POINT)
//			}
//		}
//	}

// Es dürfen keine doppelten Bullet Points vorhanden sein (derzeit nur bei Selection)
	@Check 
	def noDoubleBulletPoints(Selection choice) {
		var nameToBullet = newHashMap
		for(bullet: choice.bullets) {
			val choiceWithSameName = nameToBullet.put(bullet.bulletText, bullet)
			if(choiceWithSameName != null) {
				error("Duplicate Bullet Point", bullet, BULLET__BULLET_TEXT)
				error("Duplicate Bullet Point", choiceWithSameName, BULLET__BULLET_TEXT)
			}
		}
	}
	
// Es dürfen keine doppelten Bewertungen in Charts vorhanden sein
	@Check 
	def noDoubleChartGraduation(Chart question) {
		var nameToGraduation = newHashMap
		for(graduation: question.graduations) {
			val graduationWithSameName = nameToGraduation.put(graduation.graduationText, graduation)
			if(graduationWithSameName != null) {
				error("Duplicate Graduation", graduation, GRADUATION__GRADUATION_TEXT)
				error("Duplicate Graduation", graduationWithSameName, GRADUATION__GRADUATION_TEXT)
			}
		}
	}
}

