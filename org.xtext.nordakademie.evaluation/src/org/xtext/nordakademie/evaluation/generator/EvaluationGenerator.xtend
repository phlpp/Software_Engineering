/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.nordakademie.evaluation.evaluation.Survey
import org.xtext.nordakademie.evaluation.evaluation.Selection
import org.xtext.nordakademie.evaluation.evaluation.Freetext
import org.xtext.nordakademie.evaluation.evaluation.Page
import org.xtext.nordakademie.evaluation.evaluation.Chart
import org.xtext.nordakademie.evaluation.evaluation.Rating
import org.eclipse.emf.mwe.internal.core.ast.util.converter.IntegerConverter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EvaluationGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		// first element of ecore-tree (survey)
		val survey = resource.contents.head as Survey
		// multiple pages
		for (page : survey.pages) {
			fsa.generateFile(page.name + '.html', toHtml(survey, page))
		}
	}

	def toHtml(Survey survey, Page page) '''
		
		<html>
			<head>
				<title>«survey.title»</title>
			</head>
			<body>
				<h1>«survey.title»</h1>
				<p>«survey.greeting»</p>
								«FOR question : page.questions»
									«select(question)»
								«ENDFOR»	
			</body>
		</html>	
	'''

	// Dispatch methods make a set of overloaded methods polymorphic
	def dispatch select(Freetext question) '''
		<p>
				<label>«question.question»</label><br>
				<input type="text" name="«question.name»">
				
		</p>
	'''

	def dispatch select(Selection question) '''
		<p>
			<label>«question.question»</label><br>
			«FOR choice : question.choices»
				<input type="checkbox" name="«question.name»" value="«choice.name»"/>«choice.bulletPoint»
				«IF choice.freetext»
					&nbsp;<input type="text" name="«choice.name»">
				«ENDIF»					
				<br>
			«ENDFOR»	
		</p>		
	'''

	def dispatch select(Chart question) '''
		<p>
			<label>«question.question»</label><br>
			<style> table, td, th { border: 1px solid black; } </style>
			
			
			<table> 
		«««				first ro with graduation statements
				<tr> 
					<th>&nbsp;</th>
				«FOR graduation : question.graduations»
		em	<th>«graduation.statement»</th>
		em«ENDFOR»
		em</tr> 
		«««				rows with choices and radio buttons
				«FOR choice : question.choices»
			<tr>
			<td>«choice.bulletPoint»</td>
			 «FOR graduation : question.graduations»
			 	<td><input type="radio" name="«question.name»" value=«choice.name»></td> 	
			 «ENDFOR»
			 </tr>
				«ENDFOR»
			</table> 			
		</p>	
	'''

	def dispatch select(Rating question) '''
	<p>
		<label>«question.question»</label><br>
		«val ratings = question.rating»
		«var i =1»
		«while (i<=ratings) »
			<input type="radio" name="«question.name»"  value="«i»"  class="star"/>	
			«i=i+1»
	</p>
	'''
				
}
