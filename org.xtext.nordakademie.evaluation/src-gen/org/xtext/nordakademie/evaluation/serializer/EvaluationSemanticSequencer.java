/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.nordakademie.evaluation.evaluation.Chart;
import org.xtext.nordakademie.evaluation.evaluation.Choice;
import org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage;
import org.xtext.nordakademie.evaluation.evaluation.Freetext;
import org.xtext.nordakademie.evaluation.evaluation.Graduation;
import org.xtext.nordakademie.evaluation.evaluation.Page;
import org.xtext.nordakademie.evaluation.evaluation.Rating;
import org.xtext.nordakademie.evaluation.evaluation.Selection;
import org.xtext.nordakademie.evaluation.evaluation.Survey;
import org.xtext.nordakademie.evaluation.services.EvaluationGrammarAccess;

@SuppressWarnings("all")
public class EvaluationSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EvaluationGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == EvaluationPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case EvaluationPackage.CHART:
				sequence_Chart(context, (Chart) semanticObject); 
				return; 
			case EvaluationPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case EvaluationPackage.FREETEXT:
				sequence_Freetext(context, (Freetext) semanticObject); 
				return; 
			case EvaluationPackage.GRADUATION:
				sequence_Graduation(context, (Graduation) semanticObject); 
				return; 
			case EvaluationPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case EvaluationPackage.RATING:
				sequence_Rating(context, (Rating) semanticObject); 
				return; 
			case EvaluationPackage.SELECTION:
				sequence_Selection(context, (Selection) semanticObject); 
				return; 
			case EvaluationPackage.SURVEY:
				sequence_Survey(context, (Survey) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID question=STRING choices+=Choice* graduations+=Graduation*)
	 */
	protected void sequence_Chart(EObject context, Chart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (freetext?='freetext'? name=ID bulletPoint=STRING)
	 */
	protected void sequence_Choice(EObject context, Choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID question=STRING)
	 */
	protected void sequence_Freetext(EObject context, Freetext semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, EvaluationPackage.Literals.QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluationPackage.Literals.QUESTION__NAME));
			if(transientValues.isValueTransient(semanticObject, EvaluationPackage.Literals.QUESTION__QUESTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluationPackage.Literals.QUESTION__QUESTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFreetextAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFreetextAccess().getQuestionSTRINGTerminalRuleCall_2_0(), semanticObject.getQuestion());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID? statement=STRING)
	 */
	protected void sequence_Graduation(EObject context, Graduation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID questions+=Question*)
	 */
	protected void sequence_Page(EObject context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID question=STRING rating=INT)
	 */
	protected void sequence_Rating(EObject context, Rating semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, EvaluationPackage.Literals.QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluationPackage.Literals.QUESTION__NAME));
			if(transientValues.isValueTransient(semanticObject, EvaluationPackage.Literals.QUESTION__QUESTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluationPackage.Literals.QUESTION__QUESTION));
			if(transientValues.isValueTransient(semanticObject, EvaluationPackage.Literals.RATING__RATING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvaluationPackage.Literals.RATING__RATING));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRatingAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRatingAccess().getQuestionSTRINGTerminalRuleCall_2_0(), semanticObject.getQuestion());
		feeder.accept(grammarAccess.getRatingAccess().getRatingINTTerminalRuleCall_3_0(), semanticObject.getRating());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID question=STRING choices+=Choice*)
	 */
	protected void sequence_Selection(EObject context, Selection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID title=STRING greeting=STRING? duration=STRING? pages+=Page*)
	 */
	protected void sequence_Survey(EObject context, Survey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
