/*
 * generated by Xtext
 */
package org.xtext.nordakademie.evaluation.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.xtext.nordakademie.evaluation.evaluation.Bullet;
import org.xtext.nordakademie.evaluation.evaluation.Chart;
import org.xtext.nordakademie.evaluation.evaluation.EvaluationPackage;
import org.xtext.nordakademie.evaluation.evaluation.Freetext;
import org.xtext.nordakademie.evaluation.evaluation.Graduation;
import org.xtext.nordakademie.evaluation.evaluation.Page;
import org.xtext.nordakademie.evaluation.evaluation.Rating;
import org.xtext.nordakademie.evaluation.evaluation.Selection;
import org.xtext.nordakademie.evaluation.evaluation.Survey;
import org.xtext.nordakademie.evaluation.services.EvaluationGrammarAccess;

@SuppressWarnings("all")
public class EvaluationSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EvaluationGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == EvaluationPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case EvaluationPackage.BULLET:
				sequence_Bullet(context, (Bullet) semanticObject); 
				return; 
			case EvaluationPackage.CHART:
				sequence_Chart(context, (Chart) semanticObject); 
				return; 
			case EvaluationPackage.FREETEXT:
				sequence_Freetext(context, (Freetext) semanticObject); 
				return; 
			case EvaluationPackage.GRADUATION:
				sequence_Graduation(context, (Graduation) semanticObject); 
				return; 
			case EvaluationPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case EvaluationPackage.RATING:
				sequence_Rating(context, (Rating) semanticObject); 
				return; 
			case EvaluationPackage.SELECTION:
				sequence_Selection(context, (Selection) semanticObject); 
				return; 
			case EvaluationPackage.SURVEY:
				sequence_Survey(context, (Survey) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (freetext?='freetext'? name=ID bulletText=STRING)
	 */
	protected void sequence_Bullet(EObject context, Bullet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID questionText=STRING helpText=STRING? bullets+=Bullet* graduations+=Graduation*)
	 */
	protected void sequence_Chart(EObject context, Chart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID questionText=STRING helpText=STRING?)
	 */
	protected void sequence_Freetext(EObject context, Freetext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID? graduationText=STRING)
	 */
	protected void sequence_Graduation(EObject context, Graduation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID question=Question (forwarding?='forwarding to ->' followingPage=[Page|ID])?)
	 */
	protected void sequence_Page(EObject context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID questionText=STRING helpText=STRING? ratingQuantity=INT)
	 */
	protected void sequence_Rating(EObject context, Rating semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID questionText=STRING helpText=STRING? bullets+=Bullet*)
	 */
	protected void sequence_Selection(EObject context, Selection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID title=STRING greeting=STRING? pages+=Page*)
	 */
	protected void sequence_Survey(EObject context, Survey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
